"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[8842],{7060:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=s(4848),r=s(8453);const i={sidebar_position:9},o="dirty",a={id:"models/dirty",title:"dirty",description:"In an ORM ecosystem, it is often necessary to determine if a record has any changes to be saved or not. Dream provides powerful methods for introspecting the changing state of your model",source:"@site/docs/models/dirty.mdx",sourceDirName:"models",slug:"/models/dirty",permalink:"/docs/models/dirty",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/models/dirty.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"guides",previous:{title:"scopes",permalink:"/docs/models/scopes"},next:{title:"overview",permalink:"/docs/models/querying/overview"}},c={},d=[{value:"isDirty",id:"isdirty",level:2},{value:"changes",id:"changes",level:2},{value:"changedAttributes",id:"changedattributes",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"dirty",children:"dirty"}),"\n",(0,t.jsx)(n.p,{children:"In an ORM ecosystem, it is often necessary to determine if a record has any changes to be saved or not. Dream provides powerful methods for introspecting the changing state of your model"}),"\n",(0,t.jsx)(n.h2,{id:"isdirty",children:"isDirty"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"isDirty"})," will return true or false, depending on if a record has changes"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const user = await User.first()\nconsole.log(user.isDirty) // false\n\nuser.email = 'new@email'\nconsole.log(user.isDirty) // true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"changes",children:"changes"}),"\n",(0,t.jsxs)(n.p,{children:["For more verbose information on what has changed, you can also call the ",(0,t.jsx)(n.code,{children:"changes"})," method, which will give you an in-depth explanation of the changes for each field"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const user = await User.first()\nuser.email = 'new@email'\n\nconsole.log(user.changes())\n// {\n//   email: {\n//     was: 'how@yadoin',\n//     now: 'new@email',\n//   },\n// }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"changedattributes",children:"changedAttributes"}),"\n",(0,t.jsxs)(n.p,{children:["To retrieve only the changed attributes and their values, you can use ",(0,t.jsx)(n.code,{children:"changedAttributes"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const user = await User.first()\nuser.email = 'new@email'\n\nconsole.log(user.changedAttributes())\n// {\n//   email: 'new@email',\n// }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[854],{9457:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var o=t(4848),s=t(8453);const r={sidebar_position:1},i="psychic",a={id:"config/psychic",title:"psychic",description:"Psychic exposes a few different configuration points within the conf directory, but most of the configuration is done in conf/app.ts",source:"@site/docs/config/psychic.mdx",sourceDirName:"config",slug:"/config/psychic",permalink:"/docs/config/psychic",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config/psychic.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guides",previous:{title:"client integration",permalink:"/docs/getting-started/client-integration"},next:{title:"dream",permalink:"/docs/config/dream"}},c={},p=[];function d(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"psychic",children:"psychic"}),"\n",(0,o.jsxs)(e.p,{children:["Psychic exposes a few different configuration points within the ",(0,o.jsx)(e.code,{children:"conf"})," directory, but most of the configuration is done in ",(0,o.jsx)(e.code,{children:"conf/app.ts"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 conf\n\u2502   \u2502   \u251c\u2500\u2500 app.ts             // main psychic config\n\u2502   \u2502   \u251c\u2500\u2500 dreamconf.ts       // dream bindings\n\u2502   \u2502   \u251c\u2500\u2500 global.ts          // loaded by app entry points\n\u2502   \u2502   \u251c\u2500\u2500 inflections.ts     // loaded by app entry points\n\u2502   \u2502   \u251c\u2500\u2500 loadEnv.ts         // loaded by app entry points\n\u2502   \u2502   \u251c\u2500\u2500 repl.ts            // entry point for console\n\u2502   \u2502   \u251c\u2500\u2500 routes.ts          // describes your application routes\n\u2502   \u2502   \u251c\u2500\u2500 routeTypes.ts      // autogenerated by psychic\n"})}),"\n",(0,o.jsxs)(e.p,{children:["examining the ",(0,o.jsx)(e.code,{children:"conf/app.ts"})," file, we will see many configuration options that can be tapped into with ease:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"import { PsychicConfig, background } from '@rvohealth/psychic'\nimport { developmentOrTestEnv, testEnv } from '@rvohealth/dream'\nimport expressWinston from 'express-winston'\nimport winston from 'winston'\n\nexport default (psy: PsychicConfig) => {\n  // ******\n  // CONFIG:\n  // ******\n\n  // the name of your application (no spaces)\n  psy.appName = 'howyadoin'\n\n  // set to true to leverage internal websocket bindings to socket.io\n  psy.useWs = true\n\n  // set to true to leverage internal redis bindings.\n  psy.useRedis = true\n\n  // set to true if you want to also attach a client app to your project.\n  psy.apiOnly = false\n\n  // set options to pass to express.json when middleware is booted\n  psy.setJsonOptions({\n    limit: '20kb',\n  })\n\n  // set options for cookie usage\n  psy.setCookieOptions({\n    maxAge: {\n      days: 14,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0,\n    },\n  })\n\n  // set options to pass to coors when middleware is booted\n  psy.setCorsOptions({\n    credentials: true,\n    origin: [\n      process.env.CLIENT_HOST || 'http://localhost:3000'\n    ],\n  })\n\n  // configuration options for bullmq queue (used for running background jobs in redis)\n  psy.setBackgroundQueueOptions({\n    defaultJobOptions: {\n      removeOnComplete: 1000,\n      removeOnFail: 20000,\n      // 524,288,000 ms (~6.1 days) using algorithm:\n      // \"2 ^ (attempts - 1) * delay\"\n      attempts: 20,\n      backoff: {\n        type: 'exponential',\n        delay: 1000,\n      },\n    },\n  })\n\n  // configuration options for bullmq worker (used for running background jobs in redis)\n  psy.setBackgroundWorkerOptions({})\n\n  // redis background job credentials\n  psy.setRedisBackgroundJobCredentials({\n    username: process.env.BACKGROUND_JOBS_REDIS_USER,\n    password: process.env.BACKGROUND_JOBS_REDIS_PASSWORD,\n    host: process.env.BACKGROUND_JOBS_REDIS_HOST,\n    port: process.env.BACKGROUND_JOBS_REDIS_PORT,\n    secure: process.env.BACKGROUND_JOBS_REDIS_USE_SSL === '1',\n  })\n\n  // redis websocket credentials\n  psy.setRedisWsCredentials({\n    username: process.env.WS_REDIS_USER,\n    password: process.env.WS_REDIS_PASSWORD,\n    host: process.env.WS_REDIS_HOST,\n    port: process.env.WS_REDIS_PORT,\n    secure: process.env.WS_REDIS_USE_SSL === '1',\n  })\n\n  // ******\n  // HOOKS:\n  // ******\n\n  // run a callback on server boot (but before routes are processed)\n  psy.on('boot', () => {\n    if (!testEnv() || process.env.REQUEST_LOGGING === '1') {\n      const SENSITIVE_FIELDS = [\n        'password',\n        'token',\n        'authentication',\n        'authorization',\n        'secret',\n      ]\n\n      psy.app.use(\n        expressWinston.logger({\n          transports: [new winston.transports.Console()],\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.json()\n          ),\n          meta: true, // optional: control whether you want to log the meta data about the request (default to true)\n          msg: 'HTTP {{req.method}} {{req.url}}', // optional: customize the default logging message. E.g. \"{{res.statusCode}} {{req.method}} {{res.responseTime}}ms {{req.url}}\"\n          expressFormat: true, // Use the default Express/morgan request formatting. Enabling this will override any msg if true. Will only output colors with colorize set to true\n          colorize: false, // Color the text and status code, using the Express/morgan color palette (text: gray, status: default green, 3XX cyan, 4XX yellow, 5XX red).\n          headerBlacklist: [\n            'authorization',\n            'content-length',\n            'connection',\n            'cookie',\n            'sec-ch-ua',\n            'sec-ch-ua-mobile',\n            'sec-ch-ua-platform',\n            'sec-fetch-dest',\n            'sec-fetch-mode',\n            'sec-fetch-site',\n            'user-agent',\n          ],\n          ignoredRoutes: ['/health_check'],\n          bodyBlacklist: SENSITIVE_FIELDS,\n        })\n      )\n    }\n  })\n\n  // run a callback after routes are done processing\n  psy.on('after:routes', () => {})\n\n  // run a callback after the config is loaded\n  psy.on('load', async () => {\n    // uncomment to initialize background jobs\n    // (this should only be done if useRedis is true)\n    await background.connect()\n  })\n\n  // run a callback after the config is loaded, but only if NODE_ENV=development\n  psy.on('load:dev', () => {})\n\n  // run a callback after the config is loaded, but only if NODE_ENV=test\n  psy.on('load:test', () => {})\n\n  // run a callback after the config is loaded, but only if NODE_ENV=production\n  psy.on('load:prod', () => {})\n\n  // this function will be run any time a server error is encountered\n  // that psychic isn't sure how to respond to (i.e. 500 internal server errors)\n  psy.on('server_error', (err, _, res) => {\n    if (!res.headersSent) res.sendStatus(500)\n    else if (developmentOrTestEnv()) throw err\n  })\n\n  // run a callback after the websocket server is initially started\n  psy.on('ws:start', () => {})\n\n  // run a callback after connection to the websocket service\n  psy.on('ws:connect', () => {})\n}\n"})})]})}function l(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);
"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[659],{796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(4848),o=n(8453);n(6592);const r={sidebar_position:8},s="client integration",i={id:"getting-started/client-integration",title:"client integration",description:"Now that we have this, we can start our dev server at port 7777",source:"@site/docs/getting-started/client-integration.mdx",sourceDirName:"getting-started",slug:"/getting-started/client-integration",permalink:"/docs/getting-started/client-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/client-integration.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"guides",previous:{title:"authenticating",permalink:"/docs/getting-started/authenticating"},next:{title:"psychic",permalink:"/docs/config/psychic"}},c={},l=[];function p(e){const t={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"client-integration",children:"client integration"}),"\n",(0,a.jsx)(t.p,{children:"Now that we have this, we can start our dev server at port 7777"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"psy dev\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Of course, you will need to connect a front end to this to provide an interface for your app. If you have chosen to build your psychic app with a client integration (like react or vue), then one will have been provisioned automatically for you, and can be located in the ",(0,a.jsx)(t.code,{children:"client"})," folder at the root of your app. To launch this, you can run ",(0,a.jsx)(t.code,{children:"CLIENT=1 yarn dev"}),", which will automatically run the ",(0,a.jsx)(t.code,{children:"yarn client"})," command to sidelaunch your client."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"CLIENT=1 yarn dev\n"})}),"\n",(0,a.jsx)(t.p,{children:"Though psychic and dream don't force a particular client upon you per-say, they will provide nice helpers to sync api routes and serializer schemas over to your frontend, so that you don't have to manually re-create all your backend interfaces, or manually keep them up to date when you change the db schema using migrations."}),"\n",(0,a.jsx)(t.p,{children:"To utilize this integration, you can run the following in the console:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"yarn psy sync:client\n"})}),"\n",(0,a.jsx)(t.p,{children:"This will sync client files over to your frontend client for you, allowing you to make use of them in your app without much effort."}),"\n",(0,a.jsxs)(t.p,{children:["If you are following along with the ",(0,a.jsx)(t.a,{href:"/docs/getting-started/authenticating",children:"authentication"})," tutorial, then when you generated your ",(0,a.jsx)(t.code,{children:"User"})," model, it will have also generated a client api file at ",(0,a.jsx)(t.code,{children:"client/src/api/users.ts"}),". This api module is meant to carry all of the routes related to the user, but it did not guess correctly at what methods would be needed (since users are always a bit of an odd case in resource paradigms). Let's open that file and change it to the routes that exist in our system:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// client/src/api/users.ts\n\nimport { apiCall } from './common'\nimport { User } from './schema'\n\nexport default class UsersAPI {\n  public static create(body: Partial<User>) {\n    return apiCall('api.v1.signup.POST').send({ body })\n  }\n\n  public static signin(body: { email: string; password: string }) {\n    return apiCall('api.v1.signin.POST').send({ body })\n  }\n\n  public static me() {\n    return apiCall('api.v1.users.me.GET').send()\n  }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"Let's get some feature specs written to cover our implementation:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// api/spec/features/visitor/signs-up.spec.ts\n\nimport User from '../../../src/app/models/User'\nimport clickButton from '../helpers/clickButton'\nimport expectContent from '../helpers/expectContent'\nimport fillInput from '../helpers/fillInput'\nimport visit from '../helpers/visit'\n\ndescribe('visitor visits the signup page', () => {\n  it('allows visitor to fill sign up for a new account and then log in with the same credentials', async () => {\n    await visit('/signup')\n    await fillInput('#email', 'hello@world')\n    await fillInput('#password', 'mypassword')\n    await clickButton('sign up')\n\n    await expectContent('Log in')\n    await fillInput('#email', 'hello@world')\n    await fillInput('#password', 'mypassword')\n    await clickButton('log in')\n\n    await expectContent('DASHBOARD')\n\n    const user = await User.last()\n    expect(user.email).toEqual('hello@world')\n    expect(await user.checkPassword('mypassword')).toEqual(true)\n  })\n})\n"})}),"\n",(0,a.jsx)(t.p,{children:"Running feature specs, we will see failures, which we expect since we have not implemented anything yet."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"yarn fspec api/spec/features/visitor/signs-up.spec.ts\n"})}),"\n",(0,a.jsx)(t.p,{children:"It would be good to also have specs to cover unhappy paths for this, but for brevity I will move on. First, let's add some packages we will need on our react frontend"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"yarn --cwd=../client add react-router-dom react-redux @reduxjs/toolkit\n"})}),"\n",(0,a.jsxs)(t.p,{children:["We want a place to be able store our auth token that is outside the bindings of our component layer. To do that, let's create an app store. Feel free to call it whatever you want, I am just calling it app to keep things generic. Another name that might make sense is ",(0,a.jsx)(t.code,{children:"auth"}),", but feel free to namespace however you want. We will only be using it to store the user's auth token upon authenticating."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// src/stores/app.ts\n\nimport { createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\n\nexport interface AppStore {\n  authed: boolean\n}\n\nconst initialState: AppStore = {\n  authed: false,\n}\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    setAuthed: (state, action: PayloadAction<boolean>) => {\n      state.authed = action.payload\n    },\n  },\n})\n\nexport const { setAuthed } = appSlice.actions\nexport default appSlice.reducer\n"})}),"\n",(0,a.jsx)(t.p,{children:"And let's get that new app store imported into our store index:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { configureStore } from '@reduxjs/toolkit'\nimport appSlice from './app'\n\nexport const store = configureStore({\n  reducer: {\n    app: appSlice,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"})}),"\n",(0,a.jsx)(t.p,{children:"We will also need a hooks file to provide typing to redux, like so:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// client/src/stores/hooks.ts\n\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from '.'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n"})}),"\n",(0,a.jsx)(t.p,{children:"Let's also create three different pages to import into our app:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"A Signup page"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'// client/src/pages/Signup.tsx\n\nimport { useState } from \'react\'\nimport UsersAPI from \'../api/users\'\nimport { useNavigate } from \'react-router-dom\'\nimport routes from \'../config/routes\'\n\nexport default function SignupPage() {\n  const navigate = useNavigate()\n  const [email, setEmail] = useState(\'\')\n  const [password, setPassword] = useState(\'\')\n\n  return (\n    <div>\n      <label htmlFor="email">email</label>\n      <input name="email" type="text" id="email" value={email} onChange={e => setEmail(e.target.value)} />\n\n      <label htmlFor="password">password</label>\n      <input\n        name="password"\n        type="password"\n        id="password"\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n\n      <button\n        onClick={async () => {\n          await UsersAPI.create({ email, password })\n          navigate(routes.app.login)\n        }}\n      >\n        sign up\n      </button>\n    </div>\n  )\n}\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsx)(t.li,{children:"A Login page"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'// client/src/pages/Login.tsx\n\nimport { useState } from \'react\'\nimport UsersAPI from \'../api/users\'\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\'\')\n  const [password, setPassword] = useState(\'\')\n\n  return (\n    <div>\n      <h1>Log in</h1>\n\n      <label htmlFor="email">email</label>\n      <input name="email" type="text" id="email" value={email} onChange={e => setEmail(e.target.value)} />\n\n      <label htmlFor="password">password</label>\n      <input\n        name="password"\n        type="password"\n        id="password"\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n\n      <button\n        onClick={async () => {\n          await UsersAPI.signin({ email, password })\n          // use window.location to trigger a full page reload here\n          window.location.pathname = \'/\'\n        }}\n      >\n        log in\n      </button>\n    </div>\n  )\n}\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"3",children:["\n",(0,a.jsx)(t.li,{children:"A Dashboard page"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// client/src/pages/Dashboard.tsx\n\nexport default function DashboardPage() {\n  return <div>DASHBOARD</div>\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Let's add react router and redux providers to our app root. Open ",(0,a.jsx)(t.code,{children:"main.tsx"})," and add the ",(0,a.jsx)(t.code,{children:"BrowserRouter"})," provided by ",(0,a.jsx)(t.code,{children:"react-router-dom"})," to your JSX, as well as the ",(0,a.jsx)(t.code,{children:"Provider"})," from ",(0,a.jsx)(t.code,{children:"react-redux"})," like so:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// client/src/main.tsx\n\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { store } from './stores/index'\nimport { Provider } from 'react-redux'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["With these pages ready to go, and redux and react router correctly hooked up, we can import our new pages into the ",(0,a.jsx)(t.code,{children:"App.tsx"})," file, which we have been patiently avoiding. We will use a basic auth check useEffect call at the root of App.tsx, and if that returns with a 204, we will dispatch ",(0,a.jsx)(t.code,{children:"setAuthed(true)"})," to inform our redux store that we are authenticated. This will cause us to render our ",(0,a.jsx)(t.code,{children:"AuthedApp"})," instead of our ",(0,a.jsx)(t.code,{children:"UnauthedApp"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// client/src/App.tsx\n\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport './App.css'\nimport routes from './config/routes'\nimport SignupPage from './pages/Signup'\nimport LoginPage from './pages/Login'\nimport DashboardPage from './pages/Dashboard'\nimport { useAppDispatch, useAppSelector } from './stores/hooks'\nimport { useEffect } from 'react'\nimport UsersAPI from './api/users'\nimport { setAuthed } from './stores/app'\n\nfunction App() {\n  const dispatch = useAppDispatch()\n  const authed = useAppSelector(state => state.app.authed)\n\n  useEffect(() => {\n    async function authCheck() {\n      try {\n        await UsersAPI.me()\n        dispatch(setAuthed(true))\n      } catch (_) {\n        // no worries if they are not logged in.\n      }\n    }\n    void authCheck()\n  }, [])\n\n  if (authed) return <AuthedApp />\n  return <UnauthedApp />\n}\n\nfunction AuthedApp() {\n  return (\n    <Routes>\n      <Route path={routes.app.signup} element={<Navigate to={routes.app.home} />} />\n      <Route path={routes.app.login} element={<Navigate to={routes.app.home} />} />\n      <Route path={routes.app.home} element={<DashboardPage />} />\n    </Routes>\n  )\n}\n\nfunction UnauthedApp() {\n  return (\n    <Routes>\n      <Route path={routes.app.signup} element={<SignupPage />} />\n      <Route path={routes.app.login} element={<LoginPage />} />\n      <Route path={routes.app.home} element={<Navigate to={routes.app.login} />} />\n    </Routes>\n  )\n}\n\nexport default App\n"})}),"\n",(0,a.jsx)(t.p,{children:"With our code in place, we can now run our feature specs again to verify that it is passing:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"yarn fspec\n"})}),"\n",(0,a.jsx)(t.p,{children:"If you'd like to see more debug information, you can also run with:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"DEBUG=1 yarn fspec\n"})}),"\n",(0,a.jsx)(t.p,{children:"Additionally, to run the fspec in a real browser (firefox by default), you can run:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"BROWSER=1 yarn fspec\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},6592:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(4848);function o(e){let{children:t}=e;return(0,a.jsx)("div",{className:"right-sidebar-item",children:t})}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);
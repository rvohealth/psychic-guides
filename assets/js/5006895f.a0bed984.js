"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[3302],{6745:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var n=t(4848),o=t(8453);const a={sidebar_position:8},i="scopes",r={id:"models/scopes",title:"scopes",description:"The scoping system will be familiar to those coming from the Ruby on Rails camp, but for those who are new to this, our design was inspired by the Ruby on Rails scope pattern, and can be used to elegantly capture recurring query behavior into partialized functions which can then be applied to your quieries, enabling your complex statements to be replaced with beautiful business logic.",source:"@site/docs/models/scopes.mdx",sourceDirName:"models",slug:"/models/scopes",permalink:"/docs/models/scopes",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/models/scopes.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"guides",previous:{title:"hooks",permalink:"/docs/models/hooks"},next:{title:"dirty",permalink:"/docs/models/dirty"}},c={},l=[{value:"default scopes",id:"default-scopes",level:2}];function u(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"scopes",children:"scopes"}),"\n",(0,n.jsx)(s.p,{children:"The scoping system will be familiar to those coming from the Ruby on Rails camp, but for those who are new to this, our design was inspired by the Ruby on Rails scope pattern, and can be used to elegantly capture recurring query behavior into partialized functions which can then be applied to your quieries, enabling your complex statements to be replaced with beautiful business logic."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"export default class Post extends Dream {\n  public readonly get table() {\n    return 'posts' as const\n  }\n\n  public name: string\n  ...\n\n  @Scope()\n  public static withFunnyName(query: any) {\n    return query.where({ name: 'Chalupas jr' })\n  }\n}\n\nconst posts = await Post.scope('withFunnyName').all()\n"})}),"\n",(0,n.jsx)(s.h2,{id:"default-scopes",children:"default scopes"}),"\n",(0,n.jsx)(s.p,{children:"While regular scopes are meant to be applied manually, default scopes will automatically be applied to all queries. This behavior should be used sparingly, but there are occasionally pretty good cases for it, as seen below, emulating the Ruby on Rails paranoid gem pattern."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"export default class Post extends Dream {\n  public readonly get table() {\n    return 'posts' as const\n  }\n\n  public name: string\n  ...\n\n  @Scope({ default: true })\n  public static hideDeleted(query: any) {\n    return query.where({ deletedAt: null })\n  }\n}\n"})})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>r});var n=t(6540);const o={},a=n.createContext(o);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);
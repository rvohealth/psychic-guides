"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[872],{1909:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var o=t(4848),s=t(8453);const r={sidebar_position:7},c="repl",l={id:"config/repl",title:"repl",description:"the conf/repl.ts file is used for bootstrapping the repl (which happens when you run the yarn console script).",source:"@site/docs/config/repl.mdx",sourceDirName:"config",slug:"/config/repl",permalink:"/docs/config/repl",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config/repl.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"guides",previous:{title:"inflections",permalink:"/docs/config/inflections"},next:{title:"crud",permalink:"/docs/routing/crud"}},i={},a=[];function p(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"repl",children:"repl"}),"\n",(0,o.jsxs)(n.p,{children:["the ",(0,o.jsx)(n.code,{children:"conf/repl.ts"})," file is used for bootstrapping the repl (which happens when you run the ",(0,o.jsx)(n.code,{children:"yarn console"})," script)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// conf/repl.ts\n\nimport './loadEnv'\nimport * as repl from 'node:repl'\nimport { loadRepl } from '@rvohealth/psychic'\n\nconst replServer = repl.start('> ')\n\nexport default (async function () {\n  await loadRepl(replServer.context)\n})()\n"})}),"\n",(0,o.jsx)(n.p,{children:"By default, this config will automatically load all models and services to the global context (though beware, the names of the classes will shift in this context to be based around file path, rather than the name of the class itself), in addition to the DateTime class (provided by luxon)."}),"\n",(0,o.jsxs)(n.p,{children:["If you need to bind anything else to the global context, you can simply attach it to ",(0,o.jsx)(n.code,{children:"replServer.context"}),", like so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import MyCustomClass from '../helpers/MyCustomClass'\n\nexport default (async function () {\n  await loadRepl(replServer.context)\n  replServer.context.MyCustomClass = MyCustomClass\n})()\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will enable access once in the repl, like so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"NODE_ENV=development yarn console\n> console.log(MyCustomClass)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var o=t(6540);const s={},r=o.createContext(s);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);
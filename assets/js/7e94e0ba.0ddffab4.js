"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[5208],{5345:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var n=i(4848),s=i(8453);const t={sidebar_position:4},a="render",o={id:"serializers/render",title:"render",description:"From within a controller, one can use a serializer to restrict attributes, like so:",source:"@site/docs/serializers/render.mdx",sourceDirName:"serializers",slug:"/serializers/render",permalink:"/docs/serializers/render",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/serializers/render.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"associations",permalink:"/docs/serializers/associations"},next:{title:"unit",permalink:"/docs/specs/unit"}},l={},c=[{value:"implicit rendering",id:"implicit-rendering",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"render",children:"render"}),"\n",(0,n.jsx)(r.p,{children:"From within a controller, one can use a serializer to restrict attributes, like so:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"  public myMethod() {\n    const stuff = await Stuff.first()\n    this.ok(new StuffSerializer(stuff).render())\n  }\n"})}),"\n",(0,n.jsx)(r.h2,{id:"implicit-rendering",children:"implicit rendering"}),"\n",(0,n.jsxs)(r.p,{children:["When a psychic controller receives either a dream model or an array of dream models as an argument to the ",(0,n.jsx)(r.code,{children:"ok"})," method, it will automatically infer the serializer by calling the record(s) serializer. This means that, given a model with a serializer getter established (like so:)"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"class Stuff extends ApplicationModel {\n  ...\n  public get serializers() {\n    return {\n      default: StuffSerializer<any>,\n      summary: StuffSummarySerializer<any>,\n    }\n  }\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["The controller will implicitly render the model using it's ",(0,n.jsx)(r.code,{children:"summary"})," serializer."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"  public myMethod() {\n    const stuffs = await Stuff.all()\n    this.ok(stuffs, { serializer: 'summary' })\n  }\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>o});var n=i(6540);const s={},t=n.createContext(s);function a(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);
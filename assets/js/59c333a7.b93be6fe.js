"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[2917],{7226:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>r,toc:()=>c});var t=o(4848),a=o(8453);const n={sidebar_position:6},i="polymorphism",r={id:"models/associations/polymorphism",title:"polymorphism",description:"Polymorphism enables you to specify more than one model class for the same association slot, like so:",source:"@site/docs/models/associations/polymorphism.mdx",sourceDirName:"models/associations",slug:"/models/associations/polymorphism",permalink:"/docs/models/associations/polymorphism",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/models/associations/polymorphism.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"guides",previous:{title:"single table inheritance",permalink:"/docs/models/associations/sti"},next:{title:"overview",permalink:"/docs/models/validations/overview"}},l={},c=[];function p(e){const s={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"polymorphism",children:"polymorphism"}),"\n",(0,t.jsx)(s.p,{children:"Polymorphism enables you to specify more than one model class for the same association slot, like so:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"// models/Pet.ts\nexport default class Rating extends Dream {\n  @BelongsTo(() => [User, Recipe, Organization], { polymorphic: true })\n  public rateable: User | Recipe | Organization\n  public rateableId: DreamColumn<Rating, 'rateableId'>\n  public rateableType: DreamColumn<Rating, 'rateableType'>\n}\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In the above case, Dream will automatically set the class name of the model to the ",(0,t.jsx)(s.code,{children:"ratingType"})," any time you are saving a record to a polymorphic slot:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const rating = await Rating.create({ rateable: user })\nconsole.log(rating.rateableId) // prints the user\'s id\nconsole.log(rating.rateableType) // prints "User"\n'})}),"\n",(0,t.jsx)(s.p,{children:"Additionally, any time the polymorphic slot is loaded, the data will be cast to the appropriate model"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const ratings = await Rating.preload('rateable').all()\nconsole.log(ratings.map((rating) => rating.rateable))\n// [User{}, Recipe{}, User{}, Organization{}, etc...]\n"})})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,s,o)=>{o.d(s,{R:()=>i,x:()=>r});var t=o(6540);const a={},n=t.createContext(a);function i(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);
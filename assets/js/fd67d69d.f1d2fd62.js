"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[4853],{1234:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var n=t(4848),o=t(8453);const i={sidebar_position:4},c="websockets",r={id:"config/websockets",title:"websockets",description:"Websockets can be configured using conf/app.ts. Under the hood, psychic uses a redis integration to provide distributed websocket system support, and drives the websocket integration using socket.io. To integrate, open conf/app.ts and tap into the wsconnect hooks, like so:",source:"@site/docs/config/websockets.mdx",sourceDirName:"config",slug:"/config/websockets",permalink:"/docs/config/websockets",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config/websockets.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"routing",permalink:"/docs/config/routing"},next:{title:"redis",permalink:"/docs/config/redis"}},a={},d=[];function u(e){const s={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"websockets",children:"websockets"}),"\n",(0,n.jsxs)(s.p,{children:["Websockets can be configured using ",(0,n.jsx)(s.code,{children:"conf/app.ts"}),". Under the hood, psychic uses a redis integration to provide distributed websocket system support, and drives the websocket integration using socket.io. To integrate, open ",(0,n.jsx)(s.code,{children:"conf/app.ts"})," and tap into the ",(0,n.jsx)(s.code,{children:"ws:start"})," and ",(0,n.jsx)(s.code,{children:"ws:connect"})," hooks, like so:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"// conf/app.ts\n  ...\n\n  psy.on('ws:start', () => {\n    // this is called when the server is first started\n  })\n\n  psy.on('ws:connect', async socket => {\n    // this is called for each connection to a user\n    const auth = socket.handshake.auth\n    const token = auth.token as string\n    const userId = Encrypt.decode(token)\n    const user = await User.find(userId)\n\n    if (user) {\n      await Ws.register(socket.id, user.id)\n    }\n  })\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Calling Ws.regsiter persists a key in redis which associates that socket id with that user id (and a ",(0,n.jsx)(s.code,{children:"user"})," prefix). If you need to use a different redis prefix, you can always specify that as a third argument to register, like so:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"await Ws.register(socket.id, user.id, 'admin-user')\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Now, you can safely call ",(0,n.jsx)(s.code,{children:"Ws#emit"})," from anywhere in your application and emit to the user, like so:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"await new Ws(appRoutes, { redisPrefix: 'admin-user' }).emit(\n  'some/ws/route',\n  user.id,\n  { message: 'hello world' }\n)\n"})})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>r});var n=t(6540);const o={},i=n.createContext(o);function c(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);
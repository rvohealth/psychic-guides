"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"welcome","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"installation","href":"/docs/installation","docId":"installation","unlisted":false},{"type":"category","label":"getting started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"new app","href":"/docs/getting-started/new-app","docId":"getting-started/new-app","unlisted":false},{"type":"link","label":"authenticating","href":"/docs/getting-started/authenticating","docId":"getting-started/authenticating","unlisted":false},{"type":"link","label":"client integration","href":"/docs/getting-started/client-integration","docId":"getting-started/client-integration","unlisted":false}]},{"type":"category","label":"config","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"psychic","href":"/docs/config/psychic","docId":"config/psychic","unlisted":false},{"type":"link","label":"dream","href":"/docs/config/dream","docId":"config/dream","unlisted":false},{"type":"link","label":"routing","href":"/docs/config/routing","docId":"config/routing","unlisted":false},{"type":"link","label":"websockets","href":"/docs/config/websockets","docId":"config/websockets","unlisted":false},{"type":"link","label":"redis","href":"/docs/config/redis","docId":"config/redis","unlisted":false},{"type":"link","label":"inflections","href":"/docs/config/inflections","docId":"config/inflections","unlisted":false},{"type":"link","label":"repl","href":"/docs/config/repl","docId":"config/repl","unlisted":false}]},{"type":"category","label":"routing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"crud","href":"/docs/routing/crud","docId":"routing/crud","unlisted":false},{"type":"link","label":"resources","href":"/docs/routing/resources","docId":"routing/resources","unlisted":false},{"type":"link","label":"nesting","href":"/docs/routing/nesting","docId":"routing/nesting","unlisted":false},{"type":"link","label":"namespacing","href":"/docs/routing/namespacing","docId":"routing/namespacing","unlisted":false}]},{"type":"category","label":"controllers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generating","href":"/docs/controllers/generating","docId":"controllers/generating","unlisted":false},{"type":"link","label":"request","href":"/docs/controllers/request","docId":"controllers/request","unlisted":false},{"type":"link","label":"response","href":"/docs/controllers/response","docId":"controllers/response","unlisted":false}]},{"type":"category","label":"models","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generating","href":"/docs/models/generating","docId":"models/generating","unlisted":false},{"type":"link","label":"creating","href":"/docs/models/creating","docId":"models/creating","unlisted":false},{"type":"link","label":"updating","href":"/docs/models/updating","docId":"models/updating","unlisted":false},{"type":"link","label":"destroying","href":"/docs/models/destroying","docId":"models/destroying","unlisted":false},{"type":"link","label":"transactions","href":"/docs/models/transactions","docId":"models/transactions","unlisted":false},{"type":"link","label":"single table inheritance","href":"/docs/models/single-table-inheritance","docId":"models/single-table-inheritance","unlisted":false},{"type":"link","label":"hooks","href":"/docs/models/hooks","docId":"models/hooks","unlisted":false},{"type":"link","label":"scopes","href":"/docs/models/scopes","docId":"models/scopes","unlisted":false},{"type":"link","label":"dirty","href":"/docs/models/dirty","docId":"models/dirty","unlisted":false},{"type":"category","label":"querying","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/querying/overview","docId":"models/querying/overview","unlisted":false},{"type":"link","label":"all","href":"/docs/models/querying/all","docId":"models/querying/all","unlisted":false},{"type":"link","label":"count","href":"/docs/models/querying/count","docId":"models/querying/count","unlisted":false},{"type":"link","label":"distinct","href":"/docs/models/querying/distinct","docId":"models/querying/distinct","unlisted":false},{"type":"link","label":"exists","href":"/docs/models/querying/exists","docId":"models/querying/exists","unlisted":false},{"type":"link","label":"find","href":"/docs/models/querying/find","docId":"models/querying/find","unlisted":false},{"type":"link","label":"findBy","href":"/docs/models/querying/findBy","docId":"models/querying/findBy","unlisted":false},{"type":"link","label":"findEach","href":"/docs/models/querying/findEach","docId":"models/querying/findEach","unlisted":false},{"type":"link","label":"first","href":"/docs/models/querying/first","docId":"models/querying/first","unlisted":false},{"type":"link","label":"joins","href":"/docs/models/querying/joins","docId":"models/querying/joins","unlisted":false},{"type":"link","label":"last","href":"/docs/models/querying/last","docId":"models/querying/last","unlisted":false},{"type":"link","label":"limit","href":"/docs/models/querying/limit","docId":"models/querying/limit","unlisted":false},{"type":"link","label":"max","href":"/docs/models/querying/max","docId":"models/querying/max","unlisted":false},{"type":"link","label":"min","href":"/docs/models/querying/min","docId":"models/querying/min","unlisted":false},{"type":"link","label":"offset","href":"/docs/models/querying/offset","docId":"models/querying/offset","unlisted":false},{"type":"link","label":"ops","href":"/docs/models/querying/ops","docId":"models/querying/ops","unlisted":false},{"type":"link","label":"order","href":"/docs/models/querying/order","docId":"models/querying/order","unlisted":false},{"type":"link","label":"passthrough","href":"/docs/models/querying/passthrough","docId":"models/querying/passthrough","unlisted":false},{"type":"link","label":"pluck","href":"/docs/models/querying/pluck","docId":"models/querying/pluck","unlisted":false},{"type":"link","label":"pluckEachThrough","href":"/docs/models/querying/pluckEachThrough","docId":"models/querying/pluckEachThrough","unlisted":false},{"type":"link","label":"pluckThrough","href":"/docs/models/querying/pluckThrough","docId":"models/querying/pluckThrough","unlisted":false},{"type":"link","label":"preload","href":"/docs/models/querying/preload","docId":"models/querying/preload","unlisted":false},{"type":"link","label":"sql","href":"/docs/models/querying/sql","docId":"models/querying/sql","unlisted":false},{"type":"link","label":"unscoped","href":"/docs/models/querying/unscoped","docId":"models/querying/unscoped","unlisted":false},{"type":"link","label":"where","href":"/docs/models/querying/where","docId":"models/querying/where","unlisted":false},{"type":"link","label":"whereAny","href":"/docs/models/querying/whereAny","docId":"models/querying/whereAny","unlisted":false},{"type":"link","label":"whereNot","href":"/docs/models/querying/whereNot","docId":"models/querying/whereNot","unlisted":false}]},{"type":"category","label":"associations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/associations/overview","docId":"models/associations/overview","unlisted":false},{"type":"link","label":"belongs to","href":"/docs/models/associations/belongs-to","docId":"models/associations/belongs-to","unlisted":false},{"type":"category","label":"options","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/associations/options/overview","docId":"models/associations/options/overview","unlisted":false},{"type":"link","label":"distinct","href":"/docs/models/associations/options/distinct","docId":"models/associations/options/distinct","unlisted":false},{"type":"link","label":"foreignKey","href":"/docs/models/associations/options/foreignKey","docId":"models/associations/options/foreignKey","unlisted":false},{"type":"link","label":"optional","href":"/docs/models/associations/options/optional","docId":"models/associations/options/optional","unlisted":false},{"type":"link","label":"order","href":"/docs/models/associations/options/order","docId":"models/associations/options/order","unlisted":false},{"type":"link","label":"polymorphic","href":"/docs/models/associations/options/polymorphic","docId":"models/associations/options/polymorphic","unlisted":false},{"type":"link","label":"preloadThroughColumns","href":"/docs/models/associations/options/preloadThroughColumns","docId":"models/associations/options/preloadThroughColumns","unlisted":false},{"type":"link","label":"primaryKeyOverride","href":"/docs/models/associations/options/primaryKeyOverride","docId":"models/associations/options/primaryKeyOverride","unlisted":false},{"type":"link","label":"selfWhere","href":"/docs/models/associations/options/selfWhere","docId":"models/associations/options/selfWhere","unlisted":false},{"type":"link","label":"selfWhereNot","href":"/docs/models/associations/options/selfWhereNot","docId":"models/associations/options/selfWhereNot","unlisted":false},{"type":"link","label":"source","href":"/docs/models/associations/options/source","docId":"models/associations/options/source","unlisted":false},{"type":"link","label":"through","href":"/docs/models/associations/options/through","docId":"models/associations/options/through","unlisted":false},{"type":"link","label":"where","href":"/docs/models/associations/options/where","docId":"models/associations/options/where","unlisted":false},{"type":"link","label":"whereNot","href":"/docs/models/associations/options/whereNot","docId":"models/associations/options/whereNot","unlisted":false}]},{"type":"link","label":"has one","href":"/docs/models/associations/has-one","docId":"models/associations/has-one","unlisted":false},{"type":"link","label":"has many","href":"/docs/models/associations/has-many","docId":"models/associations/has-many","unlisted":false},{"type":"link","label":"through","href":"/docs/models/associations/through","docId":"models/associations/through","unlisted":false},{"type":"link","label":"single table inheritance","href":"/docs/models/associations/sti","docId":"models/associations/sti","unlisted":false},{"type":"link","label":"polymorphism","href":"/docs/models/associations/polymorphism","docId":"models/associations/polymorphism","unlisted":false}]},{"type":"category","label":"validations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/validations/overview","docId":"models/validations/overview","unlisted":false},{"type":"link","label":"presence","href":"/docs/models/validations/presence","docId":"models/validations/presence","unlisted":false},{"type":"link","label":"contains","href":"/docs/models/validations/contains","docId":"models/validations/contains","unlisted":false},{"type":"link","label":"numericality","href":"/docs/models/validations/numericality","docId":"models/validations/numericality","unlisted":false},{"type":"link","label":"inclusion","href":"/docs/models/validations/inclusion","docId":"models/validations/inclusion","unlisted":false},{"type":"link","label":"exclusion","href":"/docs/models/validations/exclusion","docId":"models/validations/exclusion","unlisted":false},{"type":"link","label":"custom","href":"/docs/models/validations/custom","docId":"models/validations/custom","unlisted":false}]},{"type":"category","label":"decorators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sortable","href":"/docs/models/decorators/sortable","docId":"models/decorators/sortable","unlisted":false}]}],"href":"/docs/models/"},{"type":"category","label":"serializers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generating","href":"/docs/serializers/generating","docId":"serializers/generating","unlisted":false},{"type":"link","label":"attributes","href":"/docs/serializers/attributes","docId":"serializers/attributes","unlisted":false},{"type":"link","label":"associations","href":"/docs/serializers/associations","docId":"serializers/associations","unlisted":false},{"type":"link","label":"render","href":"/docs/serializers/render","docId":"serializers/render","unlisted":false}]},{"type":"category","label":"specs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"unit","href":"/docs/specs/unit","docId":"specs/unit","unlisted":false},{"type":"link","label":"feature","href":"/docs/specs/feature","docId":"specs/feature","unlisted":false}]},{"type":"category","label":"data types / helpers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CalendarDate","href":"/docs/data_types_and_helpers/calendar-date","docId":"data_types_and_helpers/calendar-date","unlisted":false},{"type":"link","label":"DateTime","href":"/docs/data_types_and_helpers/date-time","docId":"data_types_and_helpers/date-time","unlisted":false},{"type":"link","label":"range","href":"/docs/data_types_and_helpers/range","docId":"data_types_and_helpers/range","unlisted":false}]},{"type":"category","label":"cli","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generators","href":"/docs/cli/generators","docId":"cli/generators","unlisted":false},{"type":"link","label":"spec runners","href":"/docs/cli/spec-runners","docId":"cli/spec-runners","unlisted":false},{"type":"link","label":"dev server","href":"/docs/cli/dev-server","docId":"cli/dev-server","unlisted":false},{"type":"link","label":"repl","href":"/docs/cli/repl","docId":"cli/repl","unlisted":false},{"type":"link","label":"migrations","href":"/docs/cli/migrations","docId":"cli/migrations","unlisted":false}]},{"type":"category","label":"db","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"querying","href":"/docs/db/querying","docId":"db/querying","unlisted":false}]},{"type":"category","label":"deployment","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"server","href":"/docs/deployment/server","docId":"deployment/server","unlisted":false},{"type":"link","label":"client","href":"/docs/deployment/client","docId":"deployment/client","unlisted":false}]}],"guides":[{"type":"link","label":"welcome","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"installation","href":"/docs/installation","docId":"installation","unlisted":false},{"type":"category","label":"getting started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"new app","href":"/docs/getting-started/new-app","docId":"getting-started/new-app","unlisted":false},{"type":"link","label":"authenticating","href":"/docs/getting-started/authenticating","docId":"getting-started/authenticating","unlisted":false},{"type":"link","label":"client integration","href":"/docs/getting-started/client-integration","docId":"getting-started/client-integration","unlisted":false}]},{"type":"category","label":"config","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"psychic","href":"/docs/config/psychic","docId":"config/psychic","unlisted":false},{"type":"link","label":"dream","href":"/docs/config/dream","docId":"config/dream","unlisted":false},{"type":"link","label":"routing","href":"/docs/config/routing","docId":"config/routing","unlisted":false},{"type":"link","label":"websockets","href":"/docs/config/websockets","docId":"config/websockets","unlisted":false},{"type":"link","label":"redis","href":"/docs/config/redis","docId":"config/redis","unlisted":false},{"type":"link","label":"inflections","href":"/docs/config/inflections","docId":"config/inflections","unlisted":false},{"type":"link","label":"repl","href":"/docs/config/repl","docId":"config/repl","unlisted":false}]},{"type":"category","label":"routing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"crud","href":"/docs/routing/crud","docId":"routing/crud","unlisted":false},{"type":"link","label":"resources","href":"/docs/routing/resources","docId":"routing/resources","unlisted":false},{"type":"link","label":"nesting","href":"/docs/routing/nesting","docId":"routing/nesting","unlisted":false},{"type":"link","label":"namespacing","href":"/docs/routing/namespacing","docId":"routing/namespacing","unlisted":false}]},{"type":"category","label":"controllers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generating","href":"/docs/controllers/generating","docId":"controllers/generating","unlisted":false},{"type":"link","label":"request","href":"/docs/controllers/request","docId":"controllers/request","unlisted":false},{"type":"link","label":"response","href":"/docs/controllers/response","docId":"controllers/response","unlisted":false}]},{"type":"category","label":"models","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generating","href":"/docs/models/generating","docId":"models/generating","unlisted":false},{"type":"link","label":"creating","href":"/docs/models/creating","docId":"models/creating","unlisted":false},{"type":"link","label":"updating","href":"/docs/models/updating","docId":"models/updating","unlisted":false},{"type":"link","label":"destroying","href":"/docs/models/destroying","docId":"models/destroying","unlisted":false},{"type":"link","label":"transactions","href":"/docs/models/transactions","docId":"models/transactions","unlisted":false},{"type":"link","label":"single table inheritance","href":"/docs/models/single-table-inheritance","docId":"models/single-table-inheritance","unlisted":false},{"type":"link","label":"hooks","href":"/docs/models/hooks","docId":"models/hooks","unlisted":false},{"type":"link","label":"scopes","href":"/docs/models/scopes","docId":"models/scopes","unlisted":false},{"type":"link","label":"dirty","href":"/docs/models/dirty","docId":"models/dirty","unlisted":false},{"type":"category","label":"querying","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/querying/overview","docId":"models/querying/overview","unlisted":false},{"type":"link","label":"all","href":"/docs/models/querying/all","docId":"models/querying/all","unlisted":false},{"type":"link","label":"count","href":"/docs/models/querying/count","docId":"models/querying/count","unlisted":false},{"type":"link","label":"distinct","href":"/docs/models/querying/distinct","docId":"models/querying/distinct","unlisted":false},{"type":"link","label":"exists","href":"/docs/models/querying/exists","docId":"models/querying/exists","unlisted":false},{"type":"link","label":"find","href":"/docs/models/querying/find","docId":"models/querying/find","unlisted":false},{"type":"link","label":"findBy","href":"/docs/models/querying/findBy","docId":"models/querying/findBy","unlisted":false},{"type":"link","label":"findEach","href":"/docs/models/querying/findEach","docId":"models/querying/findEach","unlisted":false},{"type":"link","label":"first","href":"/docs/models/querying/first","docId":"models/querying/first","unlisted":false},{"type":"link","label":"joins","href":"/docs/models/querying/joins","docId":"models/querying/joins","unlisted":false},{"type":"link","label":"last","href":"/docs/models/querying/last","docId":"models/querying/last","unlisted":false},{"type":"link","label":"limit","href":"/docs/models/querying/limit","docId":"models/querying/limit","unlisted":false},{"type":"link","label":"max","href":"/docs/models/querying/max","docId":"models/querying/max","unlisted":false},{"type":"link","label":"min","href":"/docs/models/querying/min","docId":"models/querying/min","unlisted":false},{"type":"link","label":"offset","href":"/docs/models/querying/offset","docId":"models/querying/offset","unlisted":false},{"type":"link","label":"ops","href":"/docs/models/querying/ops","docId":"models/querying/ops","unlisted":false},{"type":"link","label":"order","href":"/docs/models/querying/order","docId":"models/querying/order","unlisted":false},{"type":"link","label":"passthrough","href":"/docs/models/querying/passthrough","docId":"models/querying/passthrough","unlisted":false},{"type":"link","label":"pluck","href":"/docs/models/querying/pluck","docId":"models/querying/pluck","unlisted":false},{"type":"link","label":"pluckEachThrough","href":"/docs/models/querying/pluckEachThrough","docId":"models/querying/pluckEachThrough","unlisted":false},{"type":"link","label":"pluckThrough","href":"/docs/models/querying/pluckThrough","docId":"models/querying/pluckThrough","unlisted":false},{"type":"link","label":"preload","href":"/docs/models/querying/preload","docId":"models/querying/preload","unlisted":false},{"type":"link","label":"sql","href":"/docs/models/querying/sql","docId":"models/querying/sql","unlisted":false},{"type":"link","label":"unscoped","href":"/docs/models/querying/unscoped","docId":"models/querying/unscoped","unlisted":false},{"type":"link","label":"where","href":"/docs/models/querying/where","docId":"models/querying/where","unlisted":false},{"type":"link","label":"whereAny","href":"/docs/models/querying/whereAny","docId":"models/querying/whereAny","unlisted":false},{"type":"link","label":"whereNot","href":"/docs/models/querying/whereNot","docId":"models/querying/whereNot","unlisted":false}]},{"type":"category","label":"associations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/associations/overview","docId":"models/associations/overview","unlisted":false},{"type":"link","label":"belongs to","href":"/docs/models/associations/belongs-to","docId":"models/associations/belongs-to","unlisted":false},{"type":"category","label":"options","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/associations/options/overview","docId":"models/associations/options/overview","unlisted":false},{"type":"link","label":"distinct","href":"/docs/models/associations/options/distinct","docId":"models/associations/options/distinct","unlisted":false},{"type":"link","label":"foreignKey","href":"/docs/models/associations/options/foreignKey","docId":"models/associations/options/foreignKey","unlisted":false},{"type":"link","label":"optional","href":"/docs/models/associations/options/optional","docId":"models/associations/options/optional","unlisted":false},{"type":"link","label":"order","href":"/docs/models/associations/options/order","docId":"models/associations/options/order","unlisted":false},{"type":"link","label":"polymorphic","href":"/docs/models/associations/options/polymorphic","docId":"models/associations/options/polymorphic","unlisted":false},{"type":"link","label":"preloadThroughColumns","href":"/docs/models/associations/options/preloadThroughColumns","docId":"models/associations/options/preloadThroughColumns","unlisted":false},{"type":"link","label":"primaryKeyOverride","href":"/docs/models/associations/options/primaryKeyOverride","docId":"models/associations/options/primaryKeyOverride","unlisted":false},{"type":"link","label":"selfWhere","href":"/docs/models/associations/options/selfWhere","docId":"models/associations/options/selfWhere","unlisted":false},{"type":"link","label":"selfWhereNot","href":"/docs/models/associations/options/selfWhereNot","docId":"models/associations/options/selfWhereNot","unlisted":false},{"type":"link","label":"source","href":"/docs/models/associations/options/source","docId":"models/associations/options/source","unlisted":false},{"type":"link","label":"through","href":"/docs/models/associations/options/through","docId":"models/associations/options/through","unlisted":false},{"type":"link","label":"where","href":"/docs/models/associations/options/where","docId":"models/associations/options/where","unlisted":false},{"type":"link","label":"whereNot","href":"/docs/models/associations/options/whereNot","docId":"models/associations/options/whereNot","unlisted":false}]},{"type":"link","label":"has one","href":"/docs/models/associations/has-one","docId":"models/associations/has-one","unlisted":false},{"type":"link","label":"has many","href":"/docs/models/associations/has-many","docId":"models/associations/has-many","unlisted":false},{"type":"link","label":"through","href":"/docs/models/associations/through","docId":"models/associations/through","unlisted":false},{"type":"link","label":"single table inheritance","href":"/docs/models/associations/sti","docId":"models/associations/sti","unlisted":false},{"type":"link","label":"polymorphism","href":"/docs/models/associations/polymorphism","docId":"models/associations/polymorphism","unlisted":false}]},{"type":"category","label":"validations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/models/validations/overview","docId":"models/validations/overview","unlisted":false},{"type":"link","label":"presence","href":"/docs/models/validations/presence","docId":"models/validations/presence","unlisted":false},{"type":"link","label":"contains","href":"/docs/models/validations/contains","docId":"models/validations/contains","unlisted":false},{"type":"link","label":"numericality","href":"/docs/models/validations/numericality","docId":"models/validations/numericality","unlisted":false},{"type":"link","label":"inclusion","href":"/docs/models/validations/inclusion","docId":"models/validations/inclusion","unlisted":false},{"type":"link","label":"exclusion","href":"/docs/models/validations/exclusion","docId":"models/validations/exclusion","unlisted":false},{"type":"link","label":"custom","href":"/docs/models/validations/custom","docId":"models/validations/custom","unlisted":false}]},{"type":"category","label":"decorators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sortable","href":"/docs/models/decorators/sortable","docId":"models/decorators/sortable","unlisted":false}]}],"href":"/docs/models/"},{"type":"category","label":"serializers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generating","href":"/docs/serializers/generating","docId":"serializers/generating","unlisted":false},{"type":"link","label":"attributes","href":"/docs/serializers/attributes","docId":"serializers/attributes","unlisted":false},{"type":"link","label":"associations","href":"/docs/serializers/associations","docId":"serializers/associations","unlisted":false},{"type":"link","label":"render","href":"/docs/serializers/render","docId":"serializers/render","unlisted":false}]},{"type":"category","label":"specs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"unit","href":"/docs/specs/unit","docId":"specs/unit","unlisted":false},{"type":"link","label":"feature","href":"/docs/specs/feature","docId":"specs/feature","unlisted":false}]},{"type":"category","label":"data types / helpers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CalendarDate","href":"/docs/data_types_and_helpers/calendar-date","docId":"data_types_and_helpers/calendar-date","unlisted":false},{"type":"link","label":"DateTime","href":"/docs/data_types_and_helpers/date-time","docId":"data_types_and_helpers/date-time","unlisted":false},{"type":"link","label":"range","href":"/docs/data_types_and_helpers/range","docId":"data_types_and_helpers/range","unlisted":false}]},{"type":"category","label":"cli","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"generators","href":"/docs/cli/generators","docId":"cli/generators","unlisted":false},{"type":"link","label":"spec runners","href":"/docs/cli/spec-runners","docId":"cli/spec-runners","unlisted":false},{"type":"link","label":"dev server","href":"/docs/cli/dev-server","docId":"cli/dev-server","unlisted":false},{"type":"link","label":"repl","href":"/docs/cli/repl","docId":"cli/repl","unlisted":false},{"type":"link","label":"migrations","href":"/docs/cli/migrations","docId":"cli/migrations","unlisted":false}]},{"type":"category","label":"db","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"querying","href":"/docs/db/querying","docId":"db/querying","unlisted":false}]},{"type":"category","label":"deployment","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"server","href":"/docs/deployment/server","docId":"deployment/server","unlisted":false},{"type":"link","label":"client","href":"/docs/deployment/client","docId":"deployment/client","unlisted":false}]}]},"docs":{"cli/dev-server":{"id":"cli/dev-server","title":"dev server","description":"The dev command starts a dev server for local development. this command written directly to your api/package.json file (or your package.json file if your app is api-only), enabling you to customize it to your liking.","sidebar":"guides"},"cli/generators":{"id":"cli/generators","title":"generators","description":"Psychic provides several generators for quickly building scaffolding for your app.","sidebar":"guides"},"cli/migrations":{"id":"cli/migrations","title":"migrations","description":"Under the hood, Psychic leverages kysely to run our migrations. Whenever a new model is generated, a migration is automatically generated to pair with the model, as we have seen for the User model generated in the authentication example:","sidebar":"guides"},"cli/repl":{"id":"cli/repl","title":"repl","description":"The REPL (called console) enables you to inspect the database through the lense of your application. The code used to bootstrap your repl can be found in conf/repl.ts","sidebar":"guides"},"cli/spec-runners":{"id":"cli/spec-runners","title":"spec runners","description":"Spec runners enable you to run either unit or feature specs. These are written directly to your api/package.json file (or your package.json file if your app is api-only), enabling you to customize them to your liking.","sidebar":"guides"},"config/dream":{"id":"config/dream","title":"dream","description":"Since dream is an independent library that is imported by psychic, we expose configuration for you which enables dream to understand, for example, what your database credentials are, or where you want your database migrations to go. To do this, the dream library uses a few files. One of them, auto-generated by psychic when you create a new app, lives at the root of your application, and is called .dream.yml","sidebar":"guides"},"config/inflections":{"id":"config/inflections","title":"inflections","description":"The conf/inflections.ts file enables the developer to adjust pluralization rules for certain words. This can be useful for handling irregular words, since otherwise our generators and some of our lookup mechanisms will guess incorrectly at the pluralization or depluralization of a word.","sidebar":"guides"},"config/psychic":{"id":"config/psychic","title":"psychic","description":"Psychic exposes a few different configuration points within the conf directory, but most of the configuration is done in conf/app.ts","sidebar":"guides"},"config/redis":{"id":"config/redis","title":"redis","description":"Redis can be configured in conf/app.ts, like so:","sidebar":"guides"},"config/repl":{"id":"config/repl","title":"repl","description":"the conf/repl.ts file is used for bootstrapping the repl (which happens when you run the yarn console script).","sidebar":"guides"},"config/routing":{"id":"config/routing","title":"routing","description":"In addition to configuration for building your express app, a separate configuration file is provided to configure the routing mechanism provided by psychic. This file is located at conf/routes.ts.","sidebar":"guides"},"config/websockets":{"id":"config/websockets","title":"websockets","description":"Websockets can be configured using conf/app.ts. Under the hood, psychic uses a redis integration to provide distributed websocket system support, and drives the websocket integration using socket.io. To integrate, open conf/app.ts and tap into the wsconnect hooks, like so:","sidebar":"guides"},"controllers/generating":{"id":"controllers/generating","title":"generating","description":"To generate a controller, use the provided cli tool as demonstrated below:","sidebar":"guides"},"controllers/request":{"id":"controllers/request","title":"request","description":"request and response objects","sidebar":"guides"},"controllers/response":{"id":"controllers/response","title":"response","description":"magic response codes","sidebar":"guides"},"data_types_and_helpers/calendar-date":{"id":"data_types_and_helpers/calendar-date","title":"CalendarDate","description":"Date fields in the database are returned as CalendarDate objects. CalendarDate provides a clean way to deal with dates without worrying about timezone math (though several methods accept an optional zone option when setting the CalendarDate). The name CalendarDate was chosen because Date was already taken by Javascript\'s time class, and we wanted to emphasize that this class deals with days as the fundamental unit of time.","sidebar":"guides"},"data_types_and_helpers/date-time":{"id":"data_types_and_helpers/date-time","title":"DateTime","description":"Datetime fields in the database are returned as Luxon DateTime objects. DateTime provides robust handling of datetimes, including timezone manipulation, formatting, and math. See https://moment.github.io/luxon/#/ for full documentation.","sidebar":"guides"},"data_types_and_helpers/range":{"id":"data_types_and_helpers/range","title":"range","description":"Range is used in combination with where clauses in Dream.","sidebar":"guides"},"db/querying":{"id":"db/querying","title":"querying","description":"Once your database connection is configured, you are able to import it and begin making queries to your db using kysely as your database driver. This means rather than write raw queries, you will have Kysely to help you build queries and provide helpful typescript autocomplete power at a low level.","sidebar":"guides"},"deployment/client":{"id":"deployment/client","title":"client","description":"TODO: add deployment docs","sidebar":"guides"},"deployment/server":{"id":"deployment/server","title":"server","description":"TODO: add deployment docs","sidebar":"guides"},"getting-started/authenticating":{"id":"getting-started/authenticating","title":"authenticating","description":"Now that you have a new app built, you are likely pondering next steps, which usually involve building a login and registration flow for your app users. Most applications will require some sort of authentication paradigm to resolve tokens or cookies to users in your database. Since these needs will be radically different from company to company, we do not try to force you to use one or another pattern, but here we will cover one example of how to do this using entirely psychic-driven tools.","sidebar":"guides"},"getting-started/client-integration":{"id":"getting-started/client-integration","title":"client integration","description":"Now that we have this, we can start our dev server at port 7777","sidebar":"guides"},"getting-started/new-app":{"id":"getting-started/new-app","title":"new app","description":"Once the psychic cli is installed globally, you can use it to create a new psychic app locally. To","sidebar":"guides"},"installation":{"id":"installation","title":"installation","description":"In order to get started with psychic, you will first need to install the psychic package globally. The global CLI is really only needed to get a new app up and running. Once it is, you will use yarn scripts to access the non-global psychic cli, which will be useful for running migrations, generating resources, starting your development server, etc...","sidebar":"guides"},"intro":{"id":"intro","title":"welcome","description":"Psychic is a node/typescript MVC-based web framework built on top of&nbsp;","sidebar":"guides"},"models/associations/belongs-to":{"id":"models/associations/belongs-to","title":"belongs to","description":"Belongs to associations are to be used when the model in question is related to another model, and contains a foreign key to that model within its table. An example of a belongs to would be in the case of a User and Post model, where a User can write many Posts, and each Post would contain a field (called a foreign key) which points back to the id field of a User who owns it. In this context, we would say that the Post belongs to the User.","sidebar":"guides"},"models/associations/has-many":{"id":"models/associations/has-many","title":"has many","description":"Similar to has one, but returning an array of records, rather than a single record (which makes much more sense in the case of User and Post models). Like the Has one relationship, it assumes the foreign key to be on opposite model.","sidebar":"guides"},"models/associations/has-one":{"id":"models/associations/has-one","title":"has one","description":"Has one associations enable us to express a singular inverse of the belongs to statement. This means that if the Post class were to belong to User, then the user could potentially have one post (though they would more-than-likely have many instead).","sidebar":"guides"},"models/associations/options/distinct":{"id":"models/associations/options/distinct","title":"distinct","description":"","sidebar":"guides"},"models/associations/options/foreignKey":{"id":"models/associations/options/foreignKey","title":"foreignKey","description":"","sidebar":"guides"},"models/associations/options/optional":{"id":"models/associations/options/optional","title":"optional","description":"","sidebar":"guides"},"models/associations/options/order":{"id":"models/associations/options/order","title":"order","description":"When an association is defined with an order, that ordering is automatically applied whenever loading or preloading models. Association order supports the same options as query order.","sidebar":"guides"},"models/associations/options/overview":{"id":"models/associations/options/overview","title":"association options","description":"| option                                           |      default      | HasMany | HasOne | BelongsTo |","sidebar":"guides"},"models/associations/options/polymorphic":{"id":"models/associations/options/polymorphic","title":"polymorphic","description":"","sidebar":"guides"},"models/associations/options/preloadThroughColumns":{"id":"models/associations/options/preloadThroughColumns","title":"preloadThroughColumns","description":"preloadThroughColumns provides a mechanism to load columns from a join table without explicitly loading that table.","sidebar":"guides"},"models/associations/options/primaryKeyOverride":{"id":"models/associations/options/primaryKeyOverride","title":"primaryKeyOverride","description":"","sidebar":"guides"},"models/associations/options/selfWhere":{"id":"models/associations/options/selfWhere","title":"selfWhere","description":"selfWhere adds a where clause to an association between a column on the associated model and a column on this model.","sidebar":"guides"},"models/associations/options/selfWhereNot":{"id":"models/associations/options/selfWhereNot","title":"selfWhereNot","description":"selfWhereNot adds a whereNot clause to an association between a column on the associated model and a column on this model.","sidebar":"guides"},"models/associations/options/source":{"id":"models/associations/options/source","title":"source","description":"","sidebar":"guides"},"models/associations/options/through":{"id":"models/associations/options/through","title":"through","description":"","sidebar":"guides"},"models/associations/options/where":{"id":"models/associations/options/where","title":"where","description":"","sidebar":"guides"},"models/associations/options/whereNot":{"id":"models/associations/options/whereNot","title":"whereNot","description":"","sidebar":"guides"},"models/associations/overview":{"id":"models/associations/overview","title":"associations","description":"Associations codify relationships between models, instructing Dream how the relationships are represented in the database.","sidebar":"guides"},"models/associations/polymorphism":{"id":"models/associations/polymorphism","title":"polymorphism","description":"Polymorphism enables you to specify more than one model class for the same association slot, like so:","sidebar":"guides"},"models/associations/sti":{"id":"models/associations/sti","title":"single table inheritance","description":"STI is blah blah finish me","sidebar":"guides"},"models/associations/through":{"id":"models/associations/through","title":"through","description":"both HasOne and HasMany associations have recursively-nested through support built-in, enabling you to bring nested associations out of their nested context and into the parent model\'s domain.","sidebar":"guides"},"models/creating":{"id":"models/creating","title":"creating","description":"using \\"create\\"","sidebar":"guides"},"models/decorators/sortable":{"id":"models/decorators/sortable","title":"Sortable","description":"","sidebar":"guides"},"models/destroying":{"id":"models/destroying","title":"destroying","description":"To destroy a model, simply call the #destroy method on the instance.","sidebar":"guides"},"models/dirty":{"id":"models/dirty","title":"dirty","description":"In an ORM ecosystem, it is often necessary to determine if a record has any changes to be saved or not. Dream provides powerful methods for introspecting the changing state of your model","sidebar":"guides"},"models/generating":{"id":"models/generating","title":"generating","description":"The easiest way to generate a model is by using the psychic cli.","sidebar":"guides"},"models/hooks":{"id":"models/hooks","title":"hooks","description":"before create","sidebar":"guides"},"models/index":{"id":"models/index","title":"overview","description":"To power the ORM under the hood, psychic is relying on the dream library. This library was written custom for the Psychic framework (though psychic is not required to use it), and comes with some pretty incredible bells and whistles attached to make your domains sing.","sidebar":"guides"},"models/querying/all":{"id":"models/querying/all","title":"all","description":"The all method returns all records matching the given conditions. If none are passed, it will return all records in the table.","sidebar":"guides"},"models/querying/count":{"id":"models/querying/count","title":"count","description":"The count method returns a count of the table","sidebar":"guides"},"models/querying/distinct":{"id":"models/querying/distinct","title":"distinct","description":"The distinct method returns all unique records matching the given distinct field","sidebar":"guides"},"models/querying/exists":{"id":"models/querying/exists","title":"exists","description":"The exists method will return true if at least one record is found matching the query","sidebar":"guides"},"models/querying/find":{"id":"models/querying/find","title":"find","description":"Find is a simple static method used to find records by a given primary key. it will either return the record if found, or else null","sidebar":"guides"},"models/querying/findBy":{"id":"models/querying/findBy","title":"findBy","description":"The find method expects you to be passing a value matching the primary key of the given table. Passing an existing id, you will get back a promise returning the record in question, and otherwise you will get null.","sidebar":"guides"},"models/querying/findEach":{"id":"models/querying/findEach","title":"findEach","description":"The findEach method will collect records in batches of 1000 by default (though you can customize the batch size with a second argument), and then will proceed to call your callback function for each record found.","sidebar":"guides"},"models/querying/first":{"id":"models/querying/first","title":"first","description":"The first method returns the first record found in the given table.","sidebar":"guides"},"models/querying/joins":{"id":"models/querying/joins","title":"joins","description":"The joins method enables you to join associations as part of your queries.","sidebar":"guides"},"models/querying/last":{"id":"models/querying/last","title":"last","description":"The last method returns the last record found in the given table.","sidebar":"guides"},"models/querying/limit":{"id":"models/querying/limit","title":"limit","description":"The limit method enables you to limit the number of results coming from your query.","sidebar":"guides"},"models/querying/max":{"id":"models/querying/max","title":"max","description":"The max method will pluck a field with the highest value","sidebar":"guides"},"models/querying/min":{"id":"models/querying/min","title":"min","description":"The min method will pluck a field with the lowest value","sidebar":"guides"},"models/querying/offset":{"id":"models/querying/offset","title":"offset","description":"The offset method enables you to offset the query by a certain number of records. This is usually used in concert with limit to provide functional pagination.","sidebar":"guides"},"models/querying/ops":{"id":"models/querying/ops","title":"ops","description":"ops is a special set of helper methods which can tie back to lower-level kysely queries, enabling you to pass more complex statements without leaving an ideal statement flow, like so:","sidebar":"guides"},"models/querying/order":{"id":"models/querying/order","title":"order","description":"Any query can be ordered. order accepts either a string (the name of a column), and sorts ascending, or a column => direction object. In the object notation, columns that appear earlier in the object take prescendence over subsequent columns. Calling column(null) removes any previously applied ordering.","sidebar":"guides"},"models/querying/overview":{"id":"models/querying/overview","title":"overview","description":"You\'re probably tired of hearing it by now, but our querying paradigm was also modeled loosly after the Ruby on Rails querying patterns. We wanted to expose a querying interface which could tap into Kysely\'s type intelligence to expose beautiful autocomplete magic, but wanted to include the ability to use powerful rails-like features, such as joins and includes to enable the type intelligence to extend to associations against your models.","sidebar":"guides"},"models/querying/passthrough":{"id":"models/querying/passthrough","title":"passthrough","description":"Associations in dream can be defined with a passthrough constraint. This means that the only way these associations can be loaded is if data is passed through using a passthrough method. This can be useful for, i.e., localization patterns, where the locale changes for each user, and is driven by headers in a request.","sidebar":"guides"},"models/querying/pluck":{"id":"models/querying/pluck","title":"pluck","description":"The pluck method returns raw objects containing just the attributes specified. If only one attribute is passed, it is returned as a flattened array.","sidebar":"guides"},"models/querying/pluckEachThrough":{"id":"models/querying/pluckEachThrough","title":"pluckEachThrough","description":"The pluckEachThrough method is similar to pluckThrough, but does the pluck in batches of 1000 to prevent you from bringing too much data into local memory:","sidebar":"guides"},"models/querying/pluckThrough":{"id":"models/querying/pluckThrough","title":"pluckThrough","description":"The pluckThrough method enables you to drill through associations to get to the final columns to pluck.","sidebar":"guides"},"models/querying/preload":{"id":"models/querying/preload","title":"preload","description":"The preload method enables you to side-load other associations while executing a query.","sidebar":"guides"},"models/querying/sql":{"id":"models/querying/sql","title":"sql","description":"The sql method returns the sql that would be returned if executed.","sidebar":"guides"},"models/querying/unscoped":{"id":"models/querying/unscoped","title":"unscoped","description":"The unscoped method prevents scopes from applying. Consider a model where a soft delete pattern has been applied, like so:","sidebar":"guides"},"models/querying/where":{"id":"models/querying/where","title":"where","description":"The where statement will actually return back an instance of a Query (tethered by type generics back to the originating Dream class) which can then be chained with many statements before final execution.","sidebar":"guides"},"models/querying/whereAny":{"id":"models/querying/whereAny","title":"whereAny","description":"The whereAny method can be used to union two or more clauses together, like so:","sidebar":"guides"},"models/querying/whereNot":{"id":"models/querying/whereNot","title":"whereNot","description":"The whereNot statement will find all records that do not match the provided clauses","sidebar":"guides"},"models/scopes":{"id":"models/scopes","title":"scopes","description":"The scoping system will be familiar to those coming from the Ruby on Rails camp, but for those who are new to this, our design was inspired by the Ruby on Rails scope pattern, and can be used to elegantly capture recurring query behavior into partialized functions which can then be applied to your quieries, enabling your complex statements to be replaced with beautiful business logic.","sidebar":"guides"},"models/single-table-inheritance":{"id":"models/single-table-inheritance","title":"single table inheritance","description":"Single table inheritance enables model inheritance support at the database level by using a type field to capture the class name. Doing this automatically applies default scopes to the class ensuring that the type restriction is always applied.","sidebar":"guides"},"models/transactions":{"id":"models/transactions","title":"transactions","description":"Transactions can be built using any model class, but typcally would be done from the base Dream class, like so:","sidebar":"guides"},"models/updating":{"id":"models/updating","title":"updating","description":"To update a record that already exists, you can use a combination of attribute setters and the #save method on your models to trigger updates.","sidebar":"guides"},"models/validations/contains":{"id":"models/validations/contains","title":"contains","description":"Use the contains validator to ensure a certain format is met against your model before saving.","sidebar":"guides"},"models/validations/custom":{"id":"models/validations/custom","title":"custom","description":"Use custom validators for needs that are more specific than can be handled with our provided validators","sidebar":"guides"},"models/validations/exclusion":{"id":"models/validations/exclusion","title":"exclusion","description":"TODO: write this","sidebar":"guides"},"models/validations/inclusion":{"id":"models/validations/inclusion","title":"inclusion","description":"TODO: write this","sidebar":"guides"},"models/validations/numericality":{"id":"models/validations/numericality","title":"numericality","description":"Use the numericality validator to clamp a number between two values","sidebar":"guides"},"models/validations/overview":{"id":"models/validations/overview","title":"overview","description":"Validity is an important concept in dream, since it can invalidate a record before saved, which prevents the record from being saved. To determine if a record is valid, Dream provides some useful helpers:","sidebar":"guides"},"models/validations/presence":{"id":"models/validations/presence","title":"presence","description":"Use the presence validator when you want to guarantee a field is not blank before saving.","sidebar":"guides"},"routing/crud":{"id":"routing/crud","title":"crud","description":"You can add routes using the standard http methods, such as GET, POST, PUT, PATCH, and DELETE. In the below example, all the different http verbs will be pointing to the ping controller\'s ping method.","sidebar":"guides"},"routing/namespacing":{"id":"routing/namespacing","title":"namespacing","description":"You can also use namespacing to reflect folder and uri structures at once. The following example would require the respective users controller to be located at app/controllers/Api/V1/UsersController.ts","sidebar":"guides"},"routing/nesting":{"id":"routing/nesting","title":"nesting","description":"Passing a third argument to our resources method, we can create edge routes against our resource, like so:","sidebar":"guides"},"routing/resources":{"id":"routing/resources","title":"resources","description":"You can also use resourceful routing as shorthand to quickly model standard http routes for one of your underlying models, like so:","sidebar":"guides"},"serializers/associations":{"id":"serializers/associations","title":"associations","description":"Like models, serializers also have a concept of association chaining, which enables you to express rich domains without getting tied in knots","sidebar":"guides"},"serializers/attributes":{"id":"serializers/attributes","title":"attributes","description":"Serializers make use of the @Attribute decorator to specify which fields should be serialized. When the decorator is called, a single argument is passed, specifying the data type this serializer should be rendering to, like so:","sidebar":"guides"},"serializers/generating":{"id":"serializers/generating","title":"generating","description":"To generate a serializer, use the cli command provided:","sidebar":"guides"},"serializers/render":{"id":"serializers/render","title":"render","description":"From within a controller, one can use a serializer to restrict attributes, like so:","sidebar":"guides"},"specs/feature":{"id":"specs/feature","title":"feature","description":"Contrary to unit specs, feature specs will launch your front end and back end servers, driving them with jest-playwright.","sidebar":"guides"},"specs/unit":{"id":"specs/unit","title":"unit","description":"Unit specs are meant for testing strictly your backend components in isolation. They do not launch your server or front end. The config for them is located in spec/unit/jest.config.js. Composing unit specs, one is enabled to test all components of their app. Since this is all done using jest under the hood, this will likely be familiar to you already, with the one caviat that we also provide special unit spec helpers for spec\'ing your endpoints.","sidebar":"guides"}}}}')}}]);
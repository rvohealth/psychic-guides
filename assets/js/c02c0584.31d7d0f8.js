"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[9294],{1546:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>l});var s=t(4848),o=t(8453);const d={},c="unscoped",r={id:"models/querying/unscoped",title:"unscoped",description:"The unscoped method prevents scopes from applying. Consider a model where a soft delete pattern has been applied, like so:",source:"@site/docs/models/querying/unscoped.mdx",sourceDirName:"models/querying",slug:"/models/querying/unscoped",permalink:"/docs/models/querying/unscoped",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/models/querying/unscoped.mdx",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"sql",permalink:"/docs/models/querying/sql"},next:{title:"where",permalink:"/docs/models/querying/where"}},i={},l=[];function a(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"unscoped",children:"unscoped"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"unscoped"})," method prevents scopes from applying. Consider a model where a soft delete pattern has been applied, like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export default class Pet extends ApplicationModel {\n  @Scope({ default: true })\n  public static hideDeleted(query: any) {\n    return query.where({ deletedAt: null })\n  }\n\n  @BeforeDestroy()\n  public async doSoftDelete() {\n    await (this as Pet).update({ deletedAt: DateTime.now() })\n    this.preventDeletion()\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When a ",(0,s.jsx)(n.code,{children:"Pet"})," record is destroyed, the ",(0,s.jsx)(n.code,{children:"doSoftDelete"})," method will kick in, preventing the destroy and instead setting ",(0,s.jsx)(n.code,{children:"deletedAt"})," field, which will cause the default ",(0,s.jsx)(n.code,{children:"hideDeleted"})," scope to hide it. This means that you will not be able to find this record again, since the default scope will always prevent it from being shown. To get around this, you can use the ",(0,s.jsx)(n.code,{children:"unscoped"})," method, like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await Pet.count() // 0\nawait Pet.unscoped().count() // 1\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(6540);const o={},d=s.createContext(o);function c(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[1360],{8637:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var r=n(4848),i=n(8453);const t={sidebar_position:3},a="associations",o={id:"serializers/associations",title:"associations",description:"Like models, serializers also have a concept of association chaining, which enables you to express rich domains without getting tied in knots",source:"@site/docs/serializers/associations.mdx",sourceDirName:"serializers",slug:"/serializers/associations",permalink:"/docs/serializers/associations",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/serializers/associations.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guides",previous:{title:"attributes",permalink:"/docs/serializers/attributes"},next:{title:"render",permalink:"/docs/serializers/render"}},c={},l=[{value:"renders many",id:"renders-many",level:2},{value:"renders one",id:"renders-one",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"associations",children:"associations"}),"\n",(0,r.jsx)(s.p,{children:"Like models, serializers also have a concept of association chaining, which enables you to express rich domains without getting tied in knots"}),"\n",(0,r.jsx)(s.h2,{id:"renders-many",children:"renders many"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"import { Attribute, DreamSerializer } from '@rvohealth/dream'\n\nexport default class UserSerializer<\n  DataType extends User,\n> extends DreamSerializer<DataType> {\n  @RendersMany(() => Pet)\n  public pets: Pet[]\n}\n"})}),"\n",(0,r.jsx)(s.p,{children:"RendersMany will expect an array to be present at its field. Usually, this will be done by preloading on your model before serialization, like so:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const user = await User.preload('pets').first()\nthis.ok(user)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"renders-one",children:"renders one"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"import { Attribute, DreamSerializer } from '@rvohealth/dream'\n\nexport default class UserSerializer<\n  DataType extends User,\n> extends DreamSerializer<DataType> {\n  @RendersOne(() => Pet)\n  public pet: Pet\n}\n"})})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var r=n(6540);const i={},t=r.createContext(i);function a(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);
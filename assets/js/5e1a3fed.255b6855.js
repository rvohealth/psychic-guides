"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[4947],{4035:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=o(4848),n=o(8453);const i={},r="selfWhere",a={id:"models/associations/options/selfWhere",title:"selfWhere",description:"selfWhere adds a where clause to an association between a column on the associated model and a column on this model.",source:"@site/docs/models/associations/options/selfWhere.mdx",sourceDirName:"models/associations/options",slug:"/models/associations/options/selfWhere",permalink:"/docs/models/associations/options/selfWhere",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/models/associations/options/selfWhere.mdx",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"primaryKeyOverride",permalink:"/docs/models/associations/options/primaryKeyOverride"},next:{title:"selfWhereNot",permalink:"/docs/models/associations/options/selfWhereNot"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"selfwhere",children:"selfWhere"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"selfWhere"})," adds a ",(0,s.jsx)(t.code,{children:"where"})," clause to an association between a column on the associated model and a column on this model."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, suppose we have an ArtExhibit, and that each day, we want to feature a different Artwork within that exhibit. Every day, we update the ",(0,s.jsx)(t.code,{children:"featuredPosition"})," on the ArtExhibit. The ",(0,s.jsx)(t.code,{children:"featuredArtwork"})," is the Artwork with that ",(0,s.jsx)(t.code,{children:"position"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const exhibits = await ArtExhibit.preload('featuredArtwork`).all()\n// each exhibit now has its `featureArtwork` loaded and ready to serialize, etc.\n\nexport default class ArtExhibit extends ApplicationModel {\n  // ...\n\n  public featuredPosition: DreamColumn<ArtExhibit, 'featuredPosition'>\n\n  @HasMany(() => Artwork)\n  public artworks: Artwork[]\n\n  @HasOne(() => Artwork, {\n    selfWhere: {\n      position: 'featuredPosition',\n    },\n  })\n  public featuredArtwork: Artwork\n}\n\nexport default class Artwork extends ApplicationModel {\n  // ...\n\n  @Sortable({ scope: 'artExhibit' })\n  public position: DreamColumn<Artwork, 'position'>\n\n  @BelongsTo(() => ArtExhibit)\n  public artExhibit: ArtExhibit\n  public artExhibitId: DreamColumn<Artwork, 'artExhibitId'>\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var s=o(6540);const n={},i=s.createContext(n);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);
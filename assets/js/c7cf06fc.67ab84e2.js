"use strict";(self.webpackChunkpsychic_guides=self.webpackChunkpsychic_guides||[]).push([[3813],{2817:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var t=r(4848),a=r(8453);const o={sidebar_position:2},s="dream",i={id:"config/dream",title:"dream",description:"Since dream is an independent library that is imported by psychic, we expose configuration for you which enables dream to understand, for example, what your database credentials are, or where you want your database migrations to go. To do this, the dream library uses a few files. One of them, auto-generated by psychic when you create a new app, lives at the root of your application, and is called .dream.yml",source:"@site/docs/config/dream.mdx",sourceDirName:"config",slug:"/config/dream",permalink:"/docs/config/dream",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config/dream.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"psychic",permalink:"/docs/config/psychic"},next:{title:"routing",permalink:"/docs/config/routing"}},c={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"dream",children:"dream"}),"\n",(0,t.jsx)(n.p,{children:"Since dream is an independent library that is imported by psychic, we expose configuration for you which enables dream to understand, for example, what your database credentials are, or where you want your database migrations to go. To do this, the dream library uses a few files. One of them, auto-generated by psychic when you create a new app, lives at the root of your application, and is called .dream.yml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"// .dream.yml\nmodels_path: 'src/app/models'\nserializers_path: 'src/app/serializers'\nclient_api_schema_path: '../client/src/app/api/schema.ts'\nconf_path: 'src/conf'\ndb_path: 'src/db'\nunit_spec_path: 'spec/unit'\nprimary_key_type: 'bigserial'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Secondarily, a base model (called ",(0,t.jsx)(n.code,{children:"ApplicationModel"}),") is pre-established for you which contains carefully constructed type bindings to bridge the types generated by kysely throughout our app through each of your models. This happens automatically for you, but it must be the base class for each of your models in order for the type safety of our system to work properly."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Dream, Dreamconf } from '@rvohealth/dream'\nimport { AllColumns, DBClass } from '../../db/sync'\nimport { schema } from '../../db/schema'\nimport dreamconf from '../../conf/dreamconf'\n\nexport default class ApplicationModel extends Dream {\n  public get DB() {\n    return new DBClass()\n  }\n\n  public get allColumns(): typeof AllColumns {\n    return AllColumns\n  }\n\n  public get dreamconf(): Dreamconf<DBClass, typeof schema> {\n    return dreamconf\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);